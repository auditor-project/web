// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("example")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map("account")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("session")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    teams         Team[]

    @@map("user")
}

model Team {
    id          String    @id @default(cuid())
    name        String    @unique
    imageUrl    String
    description String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Project     Project[]
    users       User[]

    @@map("team")
}

model Project {
    id            String    @id @default(cuid())
    name          String
    description   String
    currentStatus String
    team          Team      @relation(fields: [teamId], references: [id])
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    signatureFile String
    sourceCodeUrl String
    teamId        String
    Results       Results[]

    @@index([teamId])
    @@map("project")
}

model Results {
    id        String   @id @default(cuid())
    file      String
    filetype  String
    search    String
    matchStr  String   @map("match_str")
    hits      String
    line      Int
    code      Json
    severity  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Project   Project? @relation(fields: [projectId], references: [id])
    projectId String?

    @@index([projectId])
    @@map("results")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_token")
}
